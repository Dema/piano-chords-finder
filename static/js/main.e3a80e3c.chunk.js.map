{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","App.module.css"],"names":["noteRange","first","MidiNumbers","fromNote","last","noop","App","useState","midiEnabled","setMidiEnabled","selectedInputDevice","setSelectedInputDevice","notesPlaying","setNotesPlaying","useEffect","WebMidi","enable","err","console","log","inputs","disable","noteOnListener","e","notes","concat","note","sort","a","b","number","noteOffListener","filter","n","addListener","removeListener","possibleChords","detect","map","name","className","css","inputDevice","pianoConainer","onStopNoteInput","onPlayNoteInput","activeNotes","playNote","stopNote","octave","join","length","chordsContainer","s","key","chord","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"4SAcMA,EAAY,CAAEC,MAFFC,IAAYC,SAAS,MAEDC,KADrBF,IAAYC,SAAS,OAGhCE,EAAO,aAoFEC,MAlFf,WAAgB,IAAD,IACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEyCF,mBACpD,MAHW,mBAENG,EAFM,KAEeC,EAFf,OAK2BJ,mBAAuB,IALlD,mBAKNK,EALM,KAKQC,EALR,KAObC,qBAAU,WASR,OARAC,IAAQC,QAAO,SAACC,GACTA,EAIHC,QAAQC,IAAIF,IAHZR,GAAe,GACfE,EAAuBI,IAAQK,OAAO,QAKnC,WACLL,IAAQM,aAET,IAEHP,qBAAU,WACR,GAAIN,EAAa,CACf,IAAMc,EAAiB,SAACC,GACtBV,GAAgB,SAACW,GAAD,OACdA,EAAMC,OAAOF,EAAEG,MAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,cAG/CC,EAAkB,SAACR,GACvBV,GAAgB,SAACW,GAAD,OACdA,EAAMQ,QAAO,SAACC,GAAD,OAAOA,EAAEH,SAAWP,EAAEG,KAAKI,cAK5C,OAFmB,OAAnBpB,QAAmB,IAAnBA,KAAqBwB,YAAY,SAAU,MAAOZ,GAC/B,OAAnBZ,QAAmB,IAAnBA,KAAqBwB,YAAY,UAAW,MAAOH,GAC5C,WACc,OAAnBrB,QAAmB,IAAnBA,KAAqByB,eAAe,SAAU,MAAOb,GAClC,OAAnBZ,QAAmB,IAAnBA,KAAqByB,eAAe,UAAW,MAAOJ,IAG1D,OAAO,eACN,CAACrB,EAAqBF,IAEzB,IAAM4B,EAAiBC,YAAOzB,EAAa0B,KAAI,SAACL,GAAD,OAAOA,EAAEM,SAExD,OACE,yBAAKC,UAAWC,IAAInC,KAClB,yBAAKkC,UAAWC,IAAIC,aAApB,iBACGhC,QADH,IACGA,OADH,EACGA,EAAqB6B,YADxB,QACgC,iBAGhC,yBAAKC,UAAWC,IAAIE,eAClB,kBAAC,IAAD,CACE3C,UAAWA,EACX4C,gBAAiBvC,EACjBwC,gBAAiBxC,EACjByC,YAAalC,EAAa0B,KAAI,SAACL,GAAD,OAAOA,EAAEH,UACvCiB,SAAU1C,EACV2C,SAAU3C,KAGd,yBAAKmC,UAAWC,IAAIjB,OAApB,UACUZ,EAAa0B,KAAI,SAACL,GAAD,OAAOA,EAAEM,KAAON,EAAEgB,UAAQC,KAAK,MACvDd,EAAee,OAAS,GACvB,oCACE,yBAAKX,UAAWC,IAAIW,iBAApB,mBAEE,wBAAIZ,UAAWC,IAAIL,gBAChBA,EAAeE,KAAI,SAACe,GAAD,OAClB,wBAAIC,IAAKD,EAAGb,UAAWC,IAAIc,OACxBF,YC5EDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,a,kBEhJ5BC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,YAAc,yBAAyB,MAAQ,mBAAmB,MAAQ,mBAAmB,gBAAkB,6BAA6B,eAAiB,4BAA4B,cAAgB,8B","file":"static/js/main.e3a80e3c.chunk.js","sourcesContent":["import \"react-piano/dist/styles.css\";\nimport { detect } from \"@tonaljs/chord-detect\";\nimport React, { useEffect, useState } from \"react\";\nimport { ControlledPiano, MidiNumbers } from \"react-piano\";\nimport WebMidi, {\n  Input,\n  InputEventNoteon,\n  InputEventNoteoff,\n  IEventNote,\n} from \"webmidi\";\nimport css from \"./App.module.css\";\n\nconst firstNote = MidiNumbers.fromNote(\"a0\");\nconst lastNote = MidiNumbers.fromNote(\"g9\");\nconst noteRange = { first: firstNote, last: lastNote };\n\nconst noop = () => {};\n\nfunction App() {\n  const [midiEnabled, setMidiEnabled] = useState(false);\n  const [selectedInputDevice, setSelectedInputDevice] = useState<Input | null>(\n    null\n  );\n  const [notesPlaying, setNotesPlaying] = useState<IEventNote[]>([]);\n\n  useEffect(() => {\n    WebMidi.enable((err) => {\n      if (!err) {\n        setMidiEnabled(true);\n        setSelectedInputDevice(WebMidi.inputs[0]);\n      } else {\n        console.log(err);\n      }\n    });\n    return () => {\n      WebMidi.disable();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (midiEnabled) {\n      const noteOnListener = (e: InputEventNoteon) => {\n        setNotesPlaying((notes) =>\n          notes.concat(e.note).sort((a, b) => a.number - b.number)\n        );\n      };\n      const noteOffListener = (e: InputEventNoteoff) => {\n        setNotesPlaying((notes) =>\n          notes.filter((n) => n.number !== e.note.number)\n        );\n      };\n      selectedInputDevice?.addListener(\"noteon\", \"all\", noteOnListener);\n      selectedInputDevice?.addListener(\"noteoff\", \"all\", noteOffListener);\n      return () => {\n        selectedInputDevice?.removeListener(\"noteon\", \"all\", noteOnListener);\n        selectedInputDevice?.removeListener(\"noteoff\", \"all\", noteOffListener);\n      };\n    }\n    return () => {};\n  }, [selectedInputDevice, midiEnabled]);\n\n  const possibleChords = detect(notesPlaying.map((n) => n.name));\n\n  return (\n    <div className={css.App}>\n      <div className={css.inputDevice}>\n        {selectedInputDevice?.name ?? \"Not Connected\"}\n      </div>\n\n      <div className={css.pianoConainer}>\n        <ControlledPiano\n          noteRange={noteRange}\n          onStopNoteInput={noop}\n          onPlayNoteInput={noop}\n          activeNotes={notesPlaying.map((n) => n.number)}\n          playNote={noop}\n          stopNote={noop}\n        />\n      </div>\n      <div className={css.notes}>\n        Notes: {notesPlaying.map((n) => n.name + n.octave).join(\", \")}\n        {possibleChords.length > 0 && (\n          <>\n            <div className={css.chordsContainer}>\n              Possible chords:\n              <ul className={css.possibleChords}>\n                {possibleChords.map((s) => (\n                  <li key={s} className={css.chord}>\n                    {s}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"inputDevice\":\"App_inputDevice__1zJmm\",\"notes\":\"App_notes__19S8P\",\"chord\":\"App_chord__27C7z\",\"chordsContainer\":\"App_chordsContainer__3lz05\",\"possibleChords\":\"App_possibleChords__2xEBU\",\"pianoConainer\":\"App_pianoConainer__3Tcnk\"};"],"sourceRoot":""}